要找到 下一个字典序更大的排列，你可以这样想：

从右往左找
找到第一个位置 i，使得 nums[i] < nums[i+1]。

这个 i 位置是“还可以变大”的地方。

如果找不到，说明整个数组是降序的 → 直接反转成升序即可（最小排列）。

从右往左找第二个位置
从数组的末尾开始，找第一个比 nums[i] 大的数 j。

交换 nums[i] 和 nums[j]
这样可以确保变大，但只是刚好比原来大一点点。

反转 i+1 到末尾的部分
因为这部分原来是降序的，反转成升序，就能保证是“下一个”而不是跳太多。

class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)

        # 1. 从右往左找第一个 nums[i] < nums[i+1] 的位置
        i = n - 2
        while i >= 0 and nums[i] >= nums[i + 1]:
            i -= 1

        if i >= 0:
            # 2. 从右往左找第一个比 nums[i] 大的数
            j = n - 1
            while nums[j] <= nums[i]:
                j -= 1
            # 3. 交换
            nums[i], nums[j] = nums[j], nums[i]

        # 4. 反转 i+1 到末尾
        left, right = i + 1, n - 1
        while left < right:
            nums[left], nums[right] = nums[right], nums[left]
            left += 1
            right -= 1
