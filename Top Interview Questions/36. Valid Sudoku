# 三个规则： 判断行 判断列 判断九宫格
# 用set()去除重复 比较长度是否相同

class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        length = 9
        return self.isRow(board, length) and self.isCol(board, length) and self.isNineCell(board, length)
    # 判断行
    def isRow(self, board, length):
        for i in range(length):
            row = [x for x in board[i] if x != '.']
            if len(set(row)) != len(row):
                return False
        return True

    # 判断列
    def isCol(self, board, length):
        for y in range(length):
            col = [board[x][y] for x in range(length) if board[x][y] != '.']
            if len(set(col)) != len(col):
                return False
        return True
    
    # 判断九宫格
    def isNineCell(self, board, length):
        for i in range(0, length, 3):
            for j in range(0, length, 3):
                cell = []
                for x in range(3):
                    for y in range(3):
                        num = board[i + x][j + y]
                        if num != '.':
                            cell.append(num)
                
                if len(set(cell)) != len(cell):
                    return False
        
        return True

-----------------------------------------------------------------------------------
每个宫格编号是 0~8：
(i // 3) 确定在第几行宫格（0,1,2）；
(j // 3) 确定在第几列宫格（0,1,2）；
组合后 (i//3)*3 + (j//3) → 宫格编号。
举例：格子 (4,7) → (4//3)*3 + (7//3) = 1*3 + 2 = 5，就是第 6 个宫格（下标从 0 算起）。

from typing import List

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        boxes = [set() for _ in range(9)]  # box_id = (i//3)*3 + (j//3)

        for i in range(9):
            for j in range(9):
                v = board[i][j]
                if v == '.':
                    continue
                b = (i // 3) * 3 + (j // 3)
                if v in rows[i] or v in cols[j] or v in boxes[b]:
                    return False
                rows[i].add(v)
                cols[j].add(v)
                boxes[b].add(v)
        return True
