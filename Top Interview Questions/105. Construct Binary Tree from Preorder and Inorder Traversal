# 前序遍历：根节点，左子树，右子树
# 中序遍历：左子树，根节点，右子树
# 首先，前序遍历的开头是根元素，使用根节点在中序遍历中的位置，则可以利用根节点将中序遍历的数组分割出左右子树
# 再根据左右子树的长度对先序遍历的数组切片。使用递归则可以构建出完整的树

class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        if not preorder or not inorder:
            return None
        
        NewRoot = TreeNode(preorder[0]) # 根節點
        index = inorder.index(preorder[0]) # 找到上面根節點在中序的位置
        NewRoot.left = self.buildTree(preorder[1:index+1], inorder[:index])
        NewRoot.right = self.buildTree(preorder[index+1:], inorder[index+1:])

        return NewRoot


#################################################################
若是inorder, postorder
因为postorder的最后一项必是root

class Solution:
    def buildTree(self, inorder, postorder):
        if not inorder or not postorder:
            return None
        
        root_val = postorder[-1]
        root = TreeNode(root_val)
        index = inorder.index(root_val)
        
        root.left = self.buildTree(inorder[:index], postorder[:index])
        root.right = self.buildTree(inorder[index+1:], postorder[index:-1])
        
        return root
