# 难
# HashMap记录 老链表的每个节点 和 新链表的每个节点的 对应关系。
# 第一个while构造了一个纯next的链表
# 第二个while对链表再次循环，修改每个节点的 random 的指针

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        hashmap = {}
        dummy = Node(0, None, None)
        hashmap[head] = dummy
        newHead = dummy
        pointer = head

        while pointer:
            node = Node(pointer.val, pointer.next, None)
            hashmap[pointer] = node
            newHead.next = node
            newHead, pointer = newHead.next, pointer.next

        pointer = head
        while pointer:
            if pointer.random:
                hashmap[pointer].random = hashmap[pointer.random]
            pointer = pointer.next
        return dummy.next
