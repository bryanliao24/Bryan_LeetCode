# <法一>
# 直接計算每個位置的容量是多少
# left儲存这个位置左边最高的那个边
# right儲存右边最高的那个边
# 两者取小的，然后再减去本身的大小，累加後即為總容量

class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        length = len(height)
        ans = 0
        left = [0] * length
        right = [0] * length

        left[0] = height[0]   
        for i in range(1, length):
            left[i] = max(height[i], left[i - 1])

        right[length - 1] = height[length - 1]   
        for i in range(length-2, -1, -1):
            right[i] = max(height[i], right[i + 1])

        for i in range(1, length - 1):
            ans += min(left[i], right[i]) - height[i]
        
        return ans
        
------------------------------------------------------------------
# two pointer
# 用left和right一樣計算單個index位置的容量
# 並用 leftMAX 和 rightMAX 儲存走过后的最长最高的边。
# ex： leftMAX 就是指针left 左边最长的线
#（1）如果 height[left] < height[right]代表就是左指针指向的数字 < 右指针指向的数字
# 左边已经走过的位置都小于 height[right]直接計算leftMAX和left容量
# 两个指针的移动条件是指针小的移动

class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        leftMAX = rightMAX = 0
        ans = 0 
        left = 0
        right = len(height) - 1

        while left < right:
            if height[left] < height[right]:
                if height[left] < leftMAX:
                    ans += leftMAX - height[left]
                else:
                    leftMAX = height[left]
                left += 1
            else:
                if height[right] < rightMAX:
                    ans += rightMAX - height[right]
                else:
                    rightMAX = height[right]
                right -= 1
        
        return ans
