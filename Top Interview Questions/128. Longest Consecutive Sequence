class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums: return 0
        longest = 0
        cur_num = cur_len = 0
        numset = set(nums) # 去重
        
        for i in numset:
            if i - 1 not in numset: # 若兩兩個數都無法組成就無法連續 若可以才開始計算
                cur_num = i
                cur_len = 1

                while cur_num + 1 in numset:
                    cur_num += 1
                    cur_len += 1
                longest = max(longest, cur_len)
        
        return longest

-------------------------------------------------------------------

# 但是题目要求O(N)
# hashmap保存的是遍历每个nums[i]所对应的值的区域
# 然后对于当前值最长的字串是该数 Left的区域 + 1 + right的区域

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        dic = collections.defaultdict(int)
        maxlength = 0
        ans = 0
        for i in nums:
            left = dic[i-1] 
            right = dic[i+1]
            maxlength = left + 1 + right

            dic[i] = maxlength
            dic[i-left] = maxlength
            dic[i-right] = maxlength
            ans = max(ans, maxlength)
    
        return ans
