只从连续段的第一个元素开始计数。
class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums: return 0
        ans = 0
        numset = set(nums) # 去重
        
        for i in numset:
            if i - 1 not in numset: # 若兩兩個數都無法組成就無法連續 若可以才開始計算 因为这样代表他才是起点 
                length = 1
                while i + length in numset:
                    length += 1
                ans = max(ans, length)
        
        return ans

-------------------------------------------------------------------

# 但是题目要求O(N)
# hashmap保存的是遍历每个nums[i]所对应的值的区域
# 然后对于当前值最长的字串是该数 Left的区域 + 1 + right的区域

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        dic = {}
        maxlength = 0
        ans = 0
        nums = set(nums)
        for i in nums:
            # if i not in dic: 同去重一个功用
            left = dic.get(i-1, 0)
            right = dic.get(i+1, 0)
            maxlength = left + 1 + right
            
            dic[i] = maxlength
            dic[i-left] = maxlength
            dic[i+right] = maxlength
            ans = max(ans, maxlength)
    
        return ans
