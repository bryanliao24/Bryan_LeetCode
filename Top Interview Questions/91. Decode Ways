# <法一> dp
# 两个条件：
# (1) dp[i] = dp[i-1] 若不为0
# (2) dp[i] += dp[i-2] 若此两个数在范围之内
# ex. s = "226"
# dp初始为[1,0,0,0]
# 第一个位置为”2” -> dp数组为[1,1,0,0]
# 第2个位置为”2” -> dp数组为[1,1,1,0] 此时前两位数字是”22”，满足区间 -> 变为[1,1,2,0]
# 第3个位置为”6” -> [1,1,2,2] 此时前两位数字是”26”，满足区间，所以变为[1,1,2,3]。
class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if s.startswith('0'):
            return 0
        dp = [0] * (len(s) + 1)
        dp[0] = 1

        for i in range(1, len(dp)):
            if s[i-1] != '0':
                dp[i] = dp[i-1]
            
            if i != 1 and '10' <= s[i-2:i] <= '26':
                dp[i] += dp[i-2]
        
        return dp[-1]
--------------------------------------------------------------------
# <法二> 递归 recursion
# ex. "2261" 直接一路拆解一直递归去掉第一个数字直到剩长度为1 -> 261 -> 61 -> 1
# 也就是从最右边开始算组合方法
# 递归传递的同时记录prefix为前两位数是否满足条件 若满足就去掉前两位继续递归后面的数字

class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        # dic = collections.default(int)
        def ways(s):
            if s in dic:
                return dic[s]
            if s[0] == '0':
                return 0
            if len(s) == 1:
                return 1
            
            w = ways(s[1:])
            prefix = int(s[0:2])
            if prefix <= 26:
                w += ways(s[2:])
            dic[s] = w
            return w
            
        dic = {}
        dic[""] = 1
        return ways(s)
