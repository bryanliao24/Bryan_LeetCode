# <法一> 回溯
# 继续开始回溯的条件是目前的结果已经是回文串
# 然后从后面的字符开始继续回溯

class Solution(object):
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        # 利用lambda 传进来一个s子字串 返回比较是否相同于翻转后 True/False
        self.palin = lambda s : s == s[::-1]
        ans = []
        self.dfs(s, ans, [])
        return ans

    def dfs(self, s, ans, path):
        if not s:
            ans.append(path)
            return None
        for i in range(1, len(s) + 1):
            if self.palin(s[:i]): #比较是否回文 若是 则直接传后面的字串 
                self.dfs(s[i:], ans, path + [s[:i]])
                
--------------------------------------------------------------------
# 撰写函式替代lambda function
def palin(s):
    if not s:
        return True
    head = 0
    tail = len(s)-1
    while head <= tail:
        if s[head] != s[tail]:
            return False
        head += 1
        tail -= 1
    return True
    
--------------------------------------------------------------------

# <法二> dp

class Solution(object):
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        n = len(s)

        # 1) 预处理：和你 longestPalindrome 用的一样的区间 DP
        #    dp[l][r] 表示 s[l..r] 是否为回文
        dp = [[False] * n for _ in range(n)]

        # 单字符必然是回文
        for i in range(n):
            dp[i][i] = True

        # 按右端点递增去填表（确保 dp[l+1][r-1] 已经被计算）
        for r in range(n):
            for l in range(r + 1):
                if s[l] == s[r] and (r - l <= 2 or dp[l + 1][r - 1]):
                    dp[l][r] = True

        # 2) 回溯：用 dp 快速判断回文，枚举所有切分
        res, path = [], []

        def dfs(start):
            # 如果已经切到结尾，记录一种方案
            if start == n:
                res.append(path[:])
                return
            # 尝试以 start 开头的每个 end
            for end in range(start, n):
                if dp[start][end]:
                    path.append(s[start:end + 1])  # 这段是回文，加入当前切分
                    dfs(end + 1)                   # 继续切剩下的串
                    path.pop()                     # 回退

        dfs(0)
        return res

