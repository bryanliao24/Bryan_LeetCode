# dict，保存每个老节点对应的新节点是多少。
# 当遍历到一个新的节点的时候，需要判断这个节点是否在字典中出现过.
# 如果出现过就把它对应的复制出来的对象放到其neighboors里
# 若没有出现过，那么就重新构造该节点，并把原节点和该节点放到字典中保存。

from typing import Optional
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        ans = self.dfs(node, {})
        return ans
    
    def dfs(node, hashmap):
        if not node:
            return 
        if node in hashmap:
            return hashmap[node]
        
        node_copy = Node(node.val, [])
        hashmap[node] = node_copy

        for n in node.neighbors:
            n_copy = self.dfs(n, hashmap)
            if n_copy:
                node_copy.neighbors.append(n_copy)
        return node_copy
