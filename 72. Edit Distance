      ''  b   c     ← word2 (列)
   +-------------
'' | 0   1   2
a  | 1   ?   ?

word1 = "a"
word2 = "bc"
- dp[0][1] = 1：从空变成 "b"，插入 1 次
- dp[0][2] = 2：从空变成 "bc"，插入 2 次
- dp[1][0] = 1：从 "a" 变成空，删除 1 次



class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        m, n = len(word1), len(word2)
        dp = [[0] * (n + 1) for _ in range(m + 1)]

        # 初始化边界
        for i in range(m + 1):
            dp[i][0] = i
        for j in range(n + 1):
            dp[0][j] = j

        # 填表
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if word1[i - 1] == word2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] # 字符相同，无需操作
                else:
                    dp[i][j] = min(
                        dp[i - 1][j - 1] + 1,  # 替换
                        dp[i - 1][j] + 1,      # 删除
                        dp[i][j - 1] + 1       # 插入
                    )

        return dp[m][n]

        
