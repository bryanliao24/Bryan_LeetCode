# dp[i]的意义是到该位置为止的最长递增子序列
# 每次遍历该index以前所有的数寻找最长
# 更新的规则是找到前一个数该数之前也有更新过 -> >0
# 最后求dp的最大值

class Solution(object):
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dp = [0] * len(nums)
        dp[0] = 1
        
        for i in range(1, len(nums)):
            sofarbig = 1
            for j in range(0, i):
                if nums[i] > nums[j]:
                    sofarbig = max(sofarbig, dp[j] + 1)
            dp[i] = sofarbig
        
        return max(dp)

-----------------------------------------
dp = [0] * len(nums)
dp[0] = 1

for i in range(0, len(nums)):
    dp[i] = 1
    for j in range(0, i):
        if nums[i] > nums[j]:
            dp[i] = max(dp[i], dp[j] + 1)
return max(dp)

-----------------------------------------

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        sub = []

        for num in nums:
            # 手写二分查找：找 sub 中第一个 >= num 的位置
            left, right = 0, len(sub) - 1
            pos = len(sub)  # 默认位置是末尾（即 num 比所有都大）
            
            while left <= right:
                mid = (left + right) // 2
                if sub[mid] >= num:
                    pos = mid
                    right = mid - 1
                else:
                    left = mid + 1

            if pos == len(sub): #只有在 sub 中存在至少一个 >= num 的元素时，pos 才会被更新，才可能小于 len(sub)。 # 否则，pos 会保持 len(sub)，即我们应当把 num 加到末尾。代表当前num比所有element都大
                sub.append(num)
            else:
                sub[pos] = num

        return len(sub)
