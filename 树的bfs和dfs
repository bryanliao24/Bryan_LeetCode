# 定义TreeNode类
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

# DFS遍历函数
def dfs(node):
    if node is None:
        return
    # 打印当前节点值
    print(node.val, end=" ")
    # 递归遍历左子树
    dfs(node.left)
    # 递归遍历右子树
    dfs(node.right)

# 广度优先搜索（BFS）按层级遍历树的节点，从上到下，从左到右逐层遍历
from collections import deque
def bfs(root):
    queue = deque()
    queue.append(root)
    
    while queue:
        node = queue.popleft()
        if not node:
            continue
        print(node.val, end=" ")  # 打印当前节点的值
        
        # 将当前节点的左右子节点（如果存在）加入队列
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)


# 创建一棵示例二叉树
#       1
#      / \
#     2   3
#    / \   \
#   4   5   6
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.right = TreeNode(6)

# 遍历整棵树
print("DFS Traversal of the Tree:")
dfs(root)
print("\n------------")
bfs(root)
