words = ["wrt","wrf","er","ett","rftt"]

# 先比较 words 的各个小字串 两个两个一队比较
# 只比较短的那个长度 取出所有的有向关系 比如wrt和wrf就是 t先于f 所以['t', 'f']
records = []
for i in range(len(words)-1):
    for j in range(min(len(words[i]), len(words[i+1]))):
        if words[i][j] == words[i+1][j]:
            continue
        records.append([words[i][j], words[i+1][j]])
        break
print(records)
# [['t', 'f'], ['w', 'e'], ['r', 't'], ['e', 'r']]

# 然后取出在word中所有出现过的字母 无顺序
characters = set()
for word in words:
    characters.update(word)
print(characters)
# {'t', 'w', 'f', 'r', 'e'}

# 然后取出所有能得到的比较关系的字母
overlapped_char = set(i[0] for i in records)  # all characters appear in the words

# 然后取出所有出现过无顺序的字母其中有哪些是无法得出比较关系的字母
missing_key = (characters - overlapped_char).pop()

# 最后返回的长度是所有出现过的字母(去重过)
all_char = len(characters)
# 从 “所有出现过无顺序的字母其中有哪些是无法得出比较关系的字母” 开始 -> 因为要嘛就是无法得到关系 要嘛就是结尾
characters = [missing_key]

# 比较record中有向关系的指向的终点 如果有出现就将record有向关系的起始点加到该点前面
while len(characters) < all_char:
    for record in records:
        if record[1] == characters[0]:
            characters = [record[0]] + characters
            print(characters)

['f']
['t', 'f'] 
['r', 't', 'f'] 
['e', 'r', 't', 'f'] 
['w', 'e', 'r', 't', 'f']




