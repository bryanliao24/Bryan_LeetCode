# 如果A[m]<A[r], 判断target是不是在m到r之间，如果是则把左边缘移到m+1，否则就target在另一半，即把右边缘移到m-1
# 如果A[m]>=A[r], 判断target是否在这个范围内，相应的移动边缘即可。

class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        left = 0
        right = len(nums) - 1
        while left <= right:
            mid = (left + right) / 2

            if nums[mid] == target:
               return mid
            if nums[mid] < nums[right]: #代表m-r是有序数组 ordered 
                if nums[mid] < target and target <= nums[right]: # 判断target是否在m-r之间
                    left = mid + 1
                else:
                    right = mid - 1
            else: # 代表l-m是有序数组
                if nums[mid] > target and target >= nums[left]:
                    right = mid - 1
                else:
                    left = mid + 1
        return -1
