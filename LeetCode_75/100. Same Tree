# <Sol:1> Recursive
class Solution(object):
    def isSameTree(self, p, q):
        
        if p and q:
            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)

        return p == q
    
  
--------------------------------------------
class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        if not p and not q:
            return True
        if not p or not q:
            return False
        return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
--------------------------------------------

# <Sol.2> Stack
class Solution(object):
    def isSameTree(self, p, q):
        stack = [[p, q]]
         
        while stack:
            p, q = stack.pop()

            if p == None and q == None:
                continue

            if p == None or q == None:
                return False
            
            if p.val == q.val:
                stack.append([p.left, q.left])
                stack.append([p.right, q.right])

            else:
                return False

        return True
