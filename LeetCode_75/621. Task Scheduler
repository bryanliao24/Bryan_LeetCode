"""
ex. AAAABBBBCCDE，n=3。
将具有相同个数的A和B视为一个任务对
最终满足要求的分配为：ABXXABXXABXXAB
剩余的任务穿插进间隔位置即可，空缺位置补idle。
最终需要最少的任务时间：（最多任务数-1）*（n + 1） + （相同最多任务的任务个数）。
（最多任务数-1）*（n + 1） -> ABXXABXXABXX
（相同最多任务的任务个数）-> A and B
所求：(num(A)-1) * (3+1) + (2)
最后注意要与time求最大值 因为有可能不够字母去插入闲置时间
"""
# most_common(n) -> 回传数量最多的前n个元素 
# if n=0 return all value in a tuple

class Solution(object):
    def leastInterval(self, tasks, n):
        """
        :type tasks: List[str]
        :type n: int
        :rtype: int
        """
        dic = Counter(tasks)
        most = dic.most_common()[0][1]
        sameTasks = 0
        for k,v in dic.items():
            if v == most:
                sameTasks += 1

        time = (most - 1) * (n + 1) + sameTasks

        return max(time, len(tasks))
------------------------------------------------------------------------
        max_task = max(task_counter.values())
        count = 0
        for k, v in task_counter.items():
            if v == max_task: count += 1
        ans = (n+1)*(max_task-1)+count
        return max(ans, len(tasks))      


------------------------------------------------------------------------

class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        freq = Counter(tasks)
        heap = []
        cooldown = deque()
        timer=0

        #create a max heap
        for key, value in freq.items():
            heapq.heappush(heap, -value)
        
        while heap or cooldown:
            timer+=1
            if heap:
                task = -heapq.heappop(heap)
                if task > 1:
                    cooldown.append((task-1, timer+n))
            
            
            while cooldown and cooldown[0][1] == timer:
                task_count, next_iteration = cooldown[0]
                cooldown.popleft()
                heapq.heappush(heap, -task_count)
        
        return timer


------------------------------------------------------------
印出顺序：

class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        freq = defaultdict(int)
        for i in tasks:
            freq[i] += 1

        max_heap = []
        for letter, count in freq.items():
            heapq.heappush(max_heap, (-count, letter))

        ans = []

        cooldown = deque()
        timer = 0

        while max_heap or cooldown:
            timer += 1
            if max_heap:
                occurence, char = heapq.heappop(max_heap)
                ans.append(char)
                if occurence + 1:
                    cooldown.append([timer + n, occurence + 1, char])
            else:
                ans.append("idle")  # 没任务可执行


            if cooldown and cooldown[0][0] == timer:
                _, counts, ch = cooldown.popleft()
                heapq.heappush(max_heap, (counts, ch))
        print("->".join(ans))
        return timer


