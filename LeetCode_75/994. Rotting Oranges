## collections.deque -> 雙向隊列  
## .popleft and .popright
#首先统计新鲜橘子的个数，把腐败橘子的位置保存到队列中。
#然后遍历队列，把队列中所有腐败橘子都弹出来，判断它的四周有没有新鲜橘子
#然后把新鲜橘子变成腐败的，并把该位置放到队列中，同时还要把新鲜橘子的个数-1.

class Solution(object):
    def orangesRotting(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        row = len(grid)
        col = len(grid[0])
        fresh = 0
        q = collections.deque()

        # 統計新鮮的個數 並把rot的坐標加入到隊列中
        for i in range(row):
            for j in range(col):
                if grid[i][j] == 1:
                    fresh += 1
                elif grid[i][j] == 2:
                    q.append([i,j])

        # 當沒有新鮮的時候直接返回
        if fresh == 0:
            return 0
            
        directions = [(0,1), (0,-1), (-1,0), (1, 0)]
        countMinute = 0 

        while q:
            length = len(q)
            for i in range(length):
                x, y = q.popleft() # 得rot的坐標
                for d in directions:
                    #Fresh to Rot x,y
                    FtoRx, FtoRy = x+d[0], y+d[1]
                    if FtoRx < 0 or FtoRx >= row or FtoRy < 0 or FtoRy >= col or grid[FtoRx][FtoRy] != 1:
                        continue 
                    else:
                        grid[FtoRx][FtoRy] = 2
                        q.append([FtoRx,FtoRy])
                        fresh -= 1
            
            countMinute += 1
        
        if fresh != 0:
            return -1
        
        return countMinute - 1
