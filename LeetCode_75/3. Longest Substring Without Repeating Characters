# <法一> 使用虫取法 -> 根据某个条件交替移动前后指针
# seq 保存最长不重复的子字串 区间为left到right的index
# 如果下一个index的字已经出现 把seq中的字删掉 left+1

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        left = 0
        right = 0 
        seq = []
        ans = 0

        while left < len(s) and right < len(s):
            if s[right] in seq:
                if s[left] in seq:
                    seq.remove(s[left])
                
                left += 1
            else:
                seq.append(s[right])
                right += 1
                ans = max(ans, len(seq))

        return ans
----------------------------------------------------
# <法二> 使用字典保存每个字符第一次出现的index
# 当right向后遍历的过程中，如果这个字符在字典中 -> 移动left
# 移动到right字符在字典中出现的位置（即s[right]）的下一个位置。

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        left = 0
        right = 0 
        ans = 0
        seq = {}
       
        for right in range(len(s)):
            if s[right] in seq:
                left = max(left, seq[s[right]] + 1)
            
            seq[s[right]] = right
            ans = max(ans, right - left + 1)

        return ans
------------------------------------------------------------

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        seen = set()
        left = 0
        ans = 0
        
        for right in range(len(s)):
            while s[right] in seen:
                seen.remove(s[left])
                left += 1

            seen.add(s[right])
            ans = max(ans, right - left + 1)
        
        return ans
