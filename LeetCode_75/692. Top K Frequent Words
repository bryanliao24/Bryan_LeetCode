#heap 大堆 -> 每次pop数组中最大的值 剩余会继续补上 但后面的数字大小不按顺序
# 小堆 -> 每次pop最小的值
# ex. [4, 2, 3, 1] -> heap后会变 [1,3,2,4] or别的顺序 反正第一个数是最小的

#求前 k 个最大最小的数 -> 使用 Heap  ！！ 
#python默认是小堆 所以要求最大数 -> 取反 -1 

#Counter计算出现频率 但不会按照字母大小排序 
#cmp(x,y) 函数用于比较2个对象
#如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1。
#heapify把一个列表转成堆

class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        dic = Counter(words)
        heap = [(-freq, word) for word, freq in dic.items()]
        
        heapq.heapify(heap)
        #[(-2, 'i'), (-1, 'coding'), (-2, 'love'), (-1, 'leetcode')]
        #heappop(heap)[0] = -2 , -2 ......
        #heappop(heap)[1] = 'i', 'love' ......
        return [heapq.heappop(heap)[1] for i in range(k)]
