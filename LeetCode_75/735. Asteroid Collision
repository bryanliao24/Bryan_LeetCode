# ！！空列表 不等于None ！！
# None表示空，但它不等于空字符串、空列表
# 从左到右遍历每个行星，并和stack 的最后数字相比较
# 当碰撞判断留下来的数字保存到i里
# 若碰撞时 abs(当前数) > prev 则直接继续往前碰撞 直到撞到比他大的

class Solution(object):
    def asteroidCollision(self, asteroids):
        """
        :type asteroids: List[int]
        :rtype: List[int]
        """
        ans = []
        for i in asteroids:
            while ans and i < 0 and ans[-1] >= 0:
                prev = ans.pop()
                if i == prev * (-1):
                    i = None
                    break
                elif -i < prev:
                    i = prev    

            if ans != None and i != None:
                ans.append(i)

        return ans

----------------------------------------------
# <法2> 快许多
# 遍历asteroids元素 当元素为正 直接加入
# 当元素为负如下
# 情况1 ：若stack为空或者stack内仅由负数 直接加入
# 情况2 ：stack内有正数 就一直碰撞到停止

# 注意，while else中，else是while结束后必定执行的 所以要放一个break

class Solution:
    def asteroidCollision(self, asteroids: List[int]) -> List[int]:
        ans = []
        
        for i in asteroids:
            while ans and i < 0 < ans[-1]:
                if abs(ans[-1]) < abs(i):
                    ans.pop()
                    continue
                elif  abs(ans[-1]) == abs(i):
                    ans.pop()
                break      
            else:
                ans.append(i)

        return ans
