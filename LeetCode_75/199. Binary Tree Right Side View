# recursive 
# 用last[-1]直接找到这个层的最后一个元素
class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        ans = []
        self.LevelOrder(root, 0, ans)
        return [last[-1] for last in ans]
    
    def LevelOrder(self, root, level, ans):
        if not root:
            return None
        if len(ans) == level: #新增一层
            ans.append([])

        ans[level].append(root.val) 
        if root.left:
            self.LevelOrder(root.left, level+1, ans)
        if root.right:
            self.LevelOrder(root.right, level+1, ans)
-------------------------------------------------------------------

# iterative

class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        ans = []
        if not root:
            return None
        
        queue = collections.deque()
        queue.append(root)
        while(queue):
            ans.append(queue[-1].val)
            for i in range(len(queue)):
                node = queue.popleft()
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        
        return ans
