#head：指向自己 → 指向下一個（head.next）
#head.next：指向前一個（prev）
#prev：指向前一個 → 指向自己（head）
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        prev = None
        while head:
            next = head.next
            head.next = prev 
            prev = head      
            head = next
        return prev
###############################################################
        prev = None
        nextPoint = None 
        cur = head 
        while cur:
            nextPoint = cur.next  # 第一步：设立节点next指向原本的下一个节点(原本head list)
            cur.next = prev       # 第二步：把当前节点指向前一个点(reverse list)
            prev = cur            # 第三步：移动到当前节点(reverse list)
            cur = nextPoint       # 第四步：往下一个节点(原本head list)
        return prev
###############################################################
---------------------------------------------------------------
struct ListNode* reverseList(struct ListNode* head){
    struct ListNode* prev=NULL;
    struct ListNode* next=NULL;
    while(head!=NULL){
        next = head->next; //先保存下一個節點
        head->next = prev; //斷開下一個節點指向前一個
        prev = head;  
        head = next;
    }
    return prev;
}


-----------------------------
# 总结四步
# 1. 分配下一个点 n
# 2. 当前.next 指向前一个p
# 3. p 往前一个等于当前
# 4. 当前往前一个等于之前分配的n
