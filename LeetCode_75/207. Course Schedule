class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        graph = collections.defaultdict(list)
        for u, v in prerequisites:
            graph[u].append(v)
        # 1:[0] 0:[1]
        visited = [0] * numCourses
        path = []
        for i in range(numCourses):
            if self.dfs(graph, visited, i):
                return False

        return True
    
    def dfs(self, graph, visited, i):
        if visited[i] == 1: return True  
        if visited[i] == 2: return False 

        visited[i] = 1
        for j in graph[i]: 
            if self.dfs(graph, visited, j): 
                return True
        
        visited[i] = 2
        return False
