#哈弗曼树
#heappop(heap)将数组堆中的最小元素弹出
#（heap）是一种优先队列
#使用优先队列能够以任意顺序增加对象的同时找到or移除最小的元素，
#[0,0.5,1,3,4,2] heappop -> 0, heappop -> 0.5
class Solution(object):
    def lastStoneWeight(self, stones):
        """
        :type stones: List[int]
        :rtype: int
        """
        #因为heapq是从小到大排序 所以先取反-1这样会变成大到小
        #[2,7,4,1,8,1] -> ex. [-8,-7,-4,-1,-2,-1]

        heap=[]
        for i in stones:
            heapq.heappush(heap,-i)

        while len(heap)>=2:
            x1 = heapq.heappop(heap)
            x2 = heapq.heappop(heap)
            #因为 x1 - x2 必为负
            if x1 != x2:
                heapq.heappush(heap,(x1-x2))
        return -heap[-1] if heap else 0
--------------------------------------------------------------------------
/** qsort为C语言快排
4个参数： qsort(要排序的地址, 要排序的个数, sizeof(占用空间大小),cmp) cmp为函数
*/
int cmp(const void *a, const void *b){
    return *(int*)a - *(int*)b; // 由小到大排序
    //return *(int*)b - *(int*)a; //由大到小排序
}

int lastStoneWeight(int* stones, int stonesSize){
    while(stonesSize > 1){
        qsort(stones, stonesSize, sizeof(int), cmp);

        if(stones[stonesSize-1] == stones[stonesSize-2]){
            stonesSize -= 2;
        }else{
            stones[stonesSize-2] = stones[stonesSize-1] - stones[stonesSize-2] ;
            stonesSize -= 1;
        }
    }
    if(stonesSize == 0){
        return 0;
    }else{
        return stones[0];
    }
}
