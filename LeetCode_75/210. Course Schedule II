# <法一> O(N²)
# 在有向图中，每个顶点被指向的箭头个数是入度(indegree)
# 从这个顶点指出去的箭头个数是出度
# Path保存每次入度为0的点
# 找一个入度为0的点，并把它的入度变为-1，作为不再使用的点
# 同时把从这个点指向的点的入度都减1

def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        graph = collections.defaultdict(list)
        indegree = [0] * numCourses

        # u 是要上的课, v 是先修课
        for u, v in prerequisites:
            graph[v].append(u)
            indegree[u] += 1

        # 初始化队列: 入度为 0 的课可以先上
        queue = collections.deque()
        for i in range(numCourses):
            if indegree[i] == 0:
                queue.append(i)

        path = []

        while queue:
            cur = queue.popleft()
            path.append(cur)

            # 遍历它指向的课，把入度减 1
            for nxt in graph[cur]:
                indegree[nxt] -= 1
                if indegree[nxt] == 0:
                    queue.append(nxt)

        # 如果有环，说明没法上完所有课
        if len(path) == numCourses:
            return path
        else:
            return []
     
-------------------------------------------------------------
# <法二> O(N)

# 在有向图中，每个顶点被指向的箭头个数是入度(indegree)
# 从这个顶点指出去的箭头个数是出度
# Path保存每次入度为0的点
# 找一个入度为0的点，并把它的入度变为-1，作为不再使用的点
# 同时把从这个点指向的点的入度都减1

class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        graph = collections.defaultdict(list)
        for u, v in prerequisites:
            graph[u].append(v)
        # graph = {1: [0], 2: [0], 3: [1, 2]}
        # 0 = 未知, 1 = 正在遍历的, 2 = 已经遍历过的

        visited = [0] * numCourses
        path = []
        for i in range(numCourses):
            # if not False: means True -> do condition
            # True -> 有环 False无环
            if self.dfs(graph, visited, i, path):
                return []

        return path
    
    def dfs(self, graph, visited, i, path):
        if visited[i] == 1: return True  # 有环
        if visited[i] == 2: return False # 无环

        visited[i] = 1

        for j in graph[i]: # 对该节点的neighbor做递归
            if self.dfs(graph, visited, j, path): # 若任意的neighbor返回True代表有环
                return True
        
        visited[i] = 2
        path.append(i)
        return False
      
