# <法一> O(N²)
# 在有向图中，每个顶点被指向的箭头个数是入度(indegree)
# 从这个顶点指出去的箭头个数是出度
# Path保存每次入度为0的点
# 找一个入度为0的点，并把它的入度变为-1，作为不再使用的点
# 同时把从这个点指向的点的入度都减1

class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        graph = collections.defaultdict(list)
        indegrees = collections.defaultdict(int)

        # u是要上的课 v是先修课
        for u, v in prerequisites:
            graph[v].append(u)
            indegrees[u] += 1
        # graph = {0: [1, 2], 1: [3], 2: [3]}
        # indegrees = {1: 1, 2: 1, 3: 2}

        path = []
        for i in range(numCourses):
            zeroDegree = False
            for j in range(numCourses):
                if indegrees[j] == 0:
                    zeroDegree = True
                    break
            if not zeroDegree:
                return []
            
            indegrees[j] -= 1 
            path.append(j)
            for node in graph[j]:
                indegrees[node] -= 1      
    
        return path
     
-------------------------------------------------------------
# <法二> O(N)

# 在有向图中，每个顶点被指向的箭头个数是入度(indegree)
# 从这个顶点指出去的箭头个数是出度
# Path保存每次入度为0的点
# 找一个入度为0的点，并把它的入度变为-1，作为不再使用的点
# 同时把从这个点指向的点的入度都减1

class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        graph = collections.defaultdict(list)
        for u, v in prerequisites:
            graph[u].append(v)
        # graph = {1: [0], 2: [0], 3: [1, 2]}
        # 0 = 未知, 1 = 正在遍历的, 2 = 已经遍历过的

        visited = [0] * numCourses
        path = []
        for i in range(numCourses):
            # if not False: means True -> do condition
            if not self.dfs(graph, visited, i, path):
                return []

        return path
    
    def dfs(self, graph, visited, i, path):
        if visited[i] == 1: return False
        if visited[i] == 2: return True

        visited[i] = 1

        for j in graph[i]:
            if not self.dfs(graph, visited, j, path):
                return False
        
        visited[i] = 2
        path.append(i)
        return True
      
