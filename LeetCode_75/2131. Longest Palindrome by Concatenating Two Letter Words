# a-z：97-122
# A-Z：65-90
# 0-9：48-57

#遍历一次数组存在dic
#如果是两个字母相同如aa，出现次数为奇数的话可以放在中间 不然就按照ty yt一样处理
#所以就是增加 (num//2) * 4 个
#然后类似lc cl这种只算一次lc
#只取字母大的那个例如 3个lc 4个cl，那增加的是 min（num（lc）, num(cl)） * 4


class Solution(object):
    def longestPalindrome(self, words):
        """
        :type words: List[str]
        :rtype: int
        """
        dic = collections.defaultdict(int)
        count = 0
        for s in words:
            dic[s] += 1
        # -> {'ab': 2, 'ty': 1, 'yt': 1, 'lc': 1, 'cl': 1})

        odd = False
        for k,v in dic.items():
            if k[0] == k[1]: #ex. aa\bb\gg
                if v % 2 == 1: #出现的次数是奇数
                    odd = True
                count += (v//2) * 4
            
            # k > k[::-1]的意思是排除掉两个字符一样的例如aa、bb、cc
            elif k[::-1] in dic and k > k[::-1]: 
                count += min(dic[k], dic[k[::-1]]) * 4
 
        return count + (2 if odd == True else 0)
-------------------------------------------------------------------
int longestPalindrome(char ** words, int wordsSize){
    int ret = 0;
    int count[26][26] = {0}; //记录字母出现次数
    int first = 0;
    int second = 0;

    for(int i = 0; i < wordsSize; i++){
        first = words[i][0] -'a';
        second = words[i][1] -'a';
        if(count[second][first] != 0){
            count[second][first] -= 1;
            ret += 4;
        }else{
            count[first][second] += 1;
        }
    }
    //若剩下还有aa、bb、cc这种出现的次数为1的要再加2
    for(int k = 0; k < 26; k++){
        if(count[k][k] != 0){
            ret += 2;
            break;
        }
    }
    return ret;
}
