//对发现的每一块陆地记为 '0'
//然后在查找下一个新的陆地(上一个陆地已经变'0')
void countIslands(char **grid, int i, int j, int row, int col){
    if(i<0 || i>=row || j<0 || j>=col){
        return;
    }
    if(grid[i][j] == '1'){
        grid[i][j]='0';
        countIslands(grid, i-1, j, row, col);
        countIslands(grid, i, j-1, row, col);
        countIslands(grid, i+1, j, row, col);
        countIslands(grid, i, j+1, row, col);
    }
}

int numIslands(char** grid, int gridSize, int* gridColSize){
    int islands = 0;
    int row = gridSize;
    int col = gridColSize[0];

    if(grid==NULL)return;
    
    for(int i=0; i < row; i++){
        for(int j=0; j < col; j++){
            if(grid[i][j] == '1'){
                countIslands(grid, i, j, row, col);
                islands += 1;
            }
        }
    }
    return islands;
}
-----------------------------------------------------------------------
row = len(grid)
col = len(grid[0])

def dfs(grid, i, j):
    dirs = [[-1, 0], [0, 1], [0, -1], [1, 0]]
    grid[i][j] = "0"
    for d in dirs:
        x = i + d[0]
        y = j + d[1]
        if x >= 0 and y >= 0 and x < row and y < col:
            if grid[x][y] == "1":
                dfs(grid, x, y)


ans = 0
for i in range(row):
    for j in range(col):
        if grid[i][j] == "1":
            dfs(grid, i, j)
            ans += 1
return ans
-----------------------------------------------------------------------
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """

        row = len(grid)
        col = len(grid[0])
        ans = 0
        
        def dfs(x, y):
            if x < 0 or y < 0 or x >= row or y >= col:
                return 
            
            if grid[x][y] == "1":
                grid[x][y] = "0"
                dfs(x+1, y)
                dfs(x, y+1)
                dfs(x, y-1)
                dfs(x-1, y)

        for i in range(row):
            for j in range(col):
                if grid[i][j] == "1":
                    dfs(i, j)
                    ans += 1
                
        return ans
