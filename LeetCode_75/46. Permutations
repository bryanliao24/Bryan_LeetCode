# 回溯法
# 对每个可能的结果进行遍历，如果某个数字已经使用则跳过，如果没有使用则放入path中
class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        visited = [0] * len(nums)
        ans = []

        def dfs(path):
            if len(path) == len(nums):
                ans.append(path)
            else:
                for i in range(len(nums)):
                    if not visited[i]:
                        visited[i] = 1
                        dfs(path + [nums[i]])
                        visited[i] = 0

        dfs([])
        return ans
----------------------------------------------------------

# nums = [1,2,3,4]
# nums[:0] = []
# nums[:2] = [1,2]
# nums[2:] = [3,4] 

class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        def dfs(nums, ans, path):
            if not nums:
                ans.append(path)
            else:
                for i in range(len(nums)):
                    dfs(nums[:i] + nums[i + 1:], ans, path + [nums[i]])

        ans = []
        dfs(nums, ans, [])
        return ans



