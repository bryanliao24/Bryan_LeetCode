我们用 dp[i][j] 表示：以 (i, j) 这个格子作为右下角的最大正方形的边长。
1. 如果 matrix[i][j] == 0，那不可能有正方形，dp[i][j] = 0。
2. 如果 matrix[i][j] == 1，那就取决于上方、左方、左上方的三个格子

class Solution:
    def countSquares(self, matrix: List[List[int]]) -> int:
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        ans = 0

        for i in range(m):
            for j in range(n):
                if matrix[i][j] == 1:
                    if i == 0 or j == 0:
                        dp[i][j] = 1   # 第一行或第一列只能自己一个格子
                    else:
                        dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
                    ans += dp[i][j]

        return ans
