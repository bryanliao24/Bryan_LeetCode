# 双指针 慢慢向中间逼近

class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        length = len(nums)
        ans = []
        if length < 3: return ans
        nums.sort()

        for i, v in enumerate(nums):
            if i > 0 and v == nums[i - 1]: #若v和前一项相同 则非distinct -> 跳过
                continue
            
            left = i + 1
            right = length - 1
            while left < right:
                total = v + nums[left] + nums[right]
                if total < 0:
                    left += 1
                elif total > 0:
                    right -= 1
                else:
                    ans.append([v, nums[left], nums[right]])  
                    left += 1
                    right -= 1
                    while nums[left] == nums[left - 1] and left < right: #若left与前一项相同 则非distinct -> 下一个
                        left += 1    
        return ans
