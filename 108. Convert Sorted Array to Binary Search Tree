//将数组分成左右两半，左边的构建左子树，右边的构建右子树，中间元素构造根节点
struct TreeNode* sortedArrayToBST(int* nums, int numsSize){
    //递归终止条件 numsSize==0
    if(numsSize==0)return NULL;
    int mid=0;
    mid=numsSize/2;
    struct TreeNode *root= (struct TreeNode*)malloc(sizeof(struct TreeNode)*numsSize);
    root -> val =nums[mid];
    root -> left = sortedArrayToBST(nums,mid);//(起始点，终点)
    root -> right = sortedArrayToBST(nums+mid+1,numsSize-mid-1);

    return root;
}
-----------------------------------------------------------
class Solution(object):
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        length = len(nums)
        if length == 0:
            return None
        
        mid = length / 2
        root = TreeNode(nums[mid])
        root.left = self.sortedArrayToBST(nums[:mid])
        root.right = self.sortedArrayToBST(nums[(mid+1):])

        return root
