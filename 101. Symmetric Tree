bool isMirror(struct TreeNode* rootleft,struct TreeNode* rootright){
    if(rootleft==NULL && rootright==NULL)return true;
    else if(rootleft==NULL || rootright==NULL)return false;

    return (rootleft->val == rootright->val) && isMirror(rootleft->left, rootright->right) && isMirror(rootleft->right, rootright->left);

}
bool isSymmetric(struct TreeNode* root){
    if(root==NULL)return true;
    return isMirror(root->left, root->right);
}

----------------------------------------------------------------------------------

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        if not root: return True
        return self.isMirror(root.left, root.right)
        
    def isMirror(self, left, right):
        if not left and not right: return True
        if not left or not right: return False
        return left.val == right.val and self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)
