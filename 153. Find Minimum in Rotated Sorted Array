# 有序的数组就想到二分查找
class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) == 1: return nums[0]
        length = len(nums)
        right = length - 1
        left =  0
        mid = 0
        while nums[left] >= nums[right]:
            if left + 1 == right:
                mid = right 
                break

            mid = (right + left) / 2
            if nums[mid] > nums[left]:
                left = mid
            elif nums[mid] < nums[right]:
                right = mid
        
        return nums[mid]


假设 left = 1000000000，right = 2000000000，直接使用 mid = (left + right) / 2 会导致溢出：

// This may overflow
int mid = (left + right) / 2; 
而使用 mid = left + (right - left) / 2 则不会：


// This is safe and avoids overflow
int mid = left + (right - left) / 2;
